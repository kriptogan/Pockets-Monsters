#!/usr/bin/env python3
"""
Download front images (official artwork) of all Pok√©mon for use in detail pages
"""

import json
import os
import requests
import time
from pathlib import Path

def download_front_images():
    # Paths
    pokemons_file = "app/src/main/assets/pokemons.json"
    front_images_dir = "app/src/main/assets/front_images"
    
    # Create front_images directory if it doesn't exist
    Path(front_images_dir).mkdir(parents=True, exist_ok=True)
    
    if not os.path.exists(pokemons_file):
        print(f"‚ùå File not found: {pokemons_file}")
        return False
    
    print("üñºÔ∏è  Downloading front images (official artwork) for all Pok√©mon...")
    
    try:
        # Load Pok√©mon data
        with open(pokemons_file, 'r', encoding='utf-8') as f:
            pokemons = json.load(f)
        
        print(f"üìñ Found {len(pokemons)} Pok√©mon")
        
        # Download front images
        success_count = 0
        failed_count = 0
        
        for i, pokemon in enumerate(pokemons):
            pokemon_id = pokemon['id']
            pokemon_name = pokemon['name']
            
            # Front image URL (official artwork)
            front_image_url = f"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/{pokemon_id}.png"
            
            # Output file path
            output_file = os.path.join(front_images_dir, f"{pokemon_name}.png")
            
            print(f"üì• [{i+1}/{len(pokemons)}] Downloading {pokemon_name} (ID: {pokemon_id})...")
            
            try:
                # Download the image
                response = requests.get(front_image_url, timeout=30)
                
                if response.status_code == 200:
                    # Save the image
                    with open(output_file, 'wb') as f:
                        f.write(response.content)
                    
                    # Get file size
                    file_size = len(response.content) / 1024  # KB
                    print(f"  ‚úÖ Saved {pokemon_name}.png ({file_size:.1f} KB)")
                    success_count += 1
                else:
                    print(f"  ‚ùå Failed to download {pokemon_name}: HTTP {response.status_code}")
                    failed_count += 1
                
                # Small delay to be respectful to the API
                time.sleep(0.1)
                
            except Exception as e:
                print(f"  ‚ùå Error downloading {pokemon_name}: {e}")
                failed_count += 1
        
        # Summary
        print(f"\nüéâ Download completed!")
        print(f"‚úÖ Successfully downloaded: {success_count}")
        print(f"‚ùå Failed: {failed_count}")
        print(f"üìÅ Front images saved to: {front_images_dir}")
        
        # Check total size
        total_size = 0
        for file in os.listdir(front_images_dir):
            if file.endswith('.png'):
                file_path = os.path.join(front_images_dir, file)
                total_size += os.path.getsize(file_path)
        
        total_size_mb = total_size / (1024 * 1024)
        print(f"üíæ Total size: {total_size_mb:.1f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

if __name__ == "__main__":
    success = download_front_images()
    if success:
        print("\nüéâ Front image download completed successfully!")
    else:
        print("\nüí• Failed to download front images!")
